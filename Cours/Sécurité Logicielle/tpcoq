Fixpoint mult (n m : nat) {struct n} : nat :=
  match n with
  | 0 => 0
  | S p => n * mult p m
  end.
    

Print mult.

Parameter A B C : Prop.

Lemma p1 : A -> B -> A.
Proof.
  intro.
  intro.
  assumption.
Qed.

Lemma p2 : (A -> B -> C) -> (A -> B) -> A -> C. 
Proof.
  intro.
  intro.
  intro.
  apply (H H1 (H0 H1)).
Qed.

Lemma p3 : A /\ B -> B.
Proof.
  intro.
  elim H.
  clear H.
  intros.
  assumption.
Qed.
  
  

Lemma p4 : B -> A \/ B.
Proof.
  intros.
  right.
  assumption.
Qed.


Lemma p5 : (A \/ B) -> (A -> C) -> (B -> C) -> C.
Proof.
  intros.
  elim H.
  apply H0.
  apply H1.
Qed.



Inductive is_fact : nat -> nat -> Prop :=
| is_fact_O : is_fact 0 1
| is_fact_S : forall n s : nat,
is_fact n s -> is_fact (S n) (s * (S n)).





====================================================================================================



Parameters E : Set.
Parameters P : E -> Prop.
Parameters Q : E -> Prop.


Lemma fol_1 : (forall x, ((P x) -> (Q x))) -> (exists x, (P x)) -> exists x, (Q x).
Proof.
intros.
elim H0; intros.
exists x.
apply H.
assumption.
Qed.

Lemma fol_2 : (exists x, (P x) /\ (Q x)) -> (exists x, (P x)) /\ (exists x, (Q x)).
Proof.
intros.
split.
elim H; intros.
elim H0.
intros.
exists x.
apply H1.
elim H; intros.
elim H0; intros.
exists x.
assumption.
Qed.

Fixpoint eq_nat (n m : nat) : Prop :=
  match n, m with
  | O, O => True
  | O, S _ => False
  | S _, O => False
  | S n1 , S m1 => eq_nat n1 m1
  end.

Lemma eq_nat_1: forall (n:  nat),
 eq_nat n n.
Proof.
intros.
induction n.
simpl.
reflexivity.
simpl.
apply IHn.
Qed.

(*
Lemma nat_eq_2: forall (n m:  nat),
 n = m -> eq_nat n m .
Proof.
intros.
induction n.
induction m.
simpl; reflexivity.
elim H; simpl; reflexivity.
rewrite H.
induction m.
simpl; reflexivity.
elim H.
elim IHn.
Qed.
*)
(*
Lemma nat_eq_3: forall (n m:  nat),
eq_nat n m -> n = m.
Proof.
Qed.
*)
Require Import Arith.
Require Import Omega.
Require Export List.
Open Scope list_scope.
Import ListNotations.

Inductive is_rev : list nat -> list nat -> Prop :=
  | is_rev_nil : is_rev nil nil
  | is_rev_cons : forall ( n : nat ) ( l1 l2 v : list nat ) ,
  is_rev l1 l2 -> v = l2++[n] -> is_rev ( n::l1 ) v
  | is_rev_sym : forall ( l1 l2 : list nat ) , is_rev l1 l2 ->
  is_rev l2 l1 .

(*  
Lemma is_rev_1 : (is_rev [1; 2; 3] [3; 2; 1]).
Proof.
Qed.
*)





=======================================================================================================




(*Exercice (factorielle) :*)
    
Require Import FunInd.

Inductive is_fact : nat -> nat -> Prop :=
| is_fact_0 : is_fact 0 1
| is_fact_S : forall n m : nat, is_fact n m -> is_fact (S n) ((S n) * m).

Fixpoint fact (n : nat) : nat :=
  match n with
  | 0 => 1
  | (S n) => (S n) * (fact n)
  end.
  
Functional Scheme fact_ind := Induction for fact Sort Prop.

Lemma fact_sound : forall (n v : nat), (fact n) = v -> is_fact n v.
Proof.
  intro; functional induction (fact n) using fact_ind.
  intros; rewrite <- H; apply is_fact_0.
  intros; rewrite <- H; apply is_fact_S; apply IHn0; reflexivity.
Qed.


(*
Exercice (tri par insertion) :
*)
    
Require Export List.
Open Scope list_scope.
Import ListNotations.
  
Inductive is_perm : list nat -> list nat -> Prop :=
| is_perm_cons : forall (a : nat) (l0 l1 : list nat),
    is_perm l0 l1 -> is_perm (a :: l0) (a :: l1)
| is_perm_append : forall (a : nat) (l : list nat),
    is_perm (a :: l) (l ++ a :: nil)
| is_perm_refl : forall l : list nat, is_perm l l
| is_perm_trans : forall l0 l1 l2 : list nat,
    is_perm l0 l1 -> is_perm l1 l2 -> is_perm l0 l2
| is_perm_sym : forall l1 l2 : list nat, is_perm l1 l2 -> is_perm l2 l1.

Lemma is_perm_ex1 : is_perm [1; 2; 3] [3; 2; 1].
Proof.
  apply (is_perm_trans [1; 2; 3] ([2; 3] ++ [1]) [3; 2; 1]).
  apply is_perm_append.
  simpl.
  apply (is_perm_trans [2; 3; 1] ([3; 1] ++ [2]) [3; 2; 1]).
  apply is_perm_append.
  simpl.
  apply is_perm_cons.
  apply (is_perm_trans [1; 2] ([2] ++ [1]) [2; 1]).
  apply is_perm_append.
  simpl.
  apply is_perm_refl.
Qed.


Ltac is_perm_tac :=
  repeat
    (apply is_perm_refl || apply is_perm_cons ||
     (match goal with
      | |- is_perm (?a1::?tl1) ?l =>
        apply (is_perm_trans (a1::tl1) (tl1 ++ a1::nil) l);
          [ apply is_perm_append | simpl ]
      end)).

Lemma is_perm_ex2 : is_perm [1; 2; 3] [3; 2; 1].
Proof.
  is_perm_tac.
Qed.



=======================================================================================================





(* N est l'ensemble qui vérifie les propriétés suivantes :
1- O in N
2- Si n in N alors (S n) in N
Les entiers naturels vérifient les 2 propriétés.
Mais {-1, 0, 1, ...} vérifie aussi les 2 propriétés.
{-2, -1, 0, 1, ...} aussi !
Tarski : on prend l'intersection de tous les ensembles vérifiant les 2 propriétés et c'est bien le plus petit. *)

Inductive my_nat : Set :=
| my_0 : my_nat
| my_S : my_nat -> my_nat.

Check my_nat_ind.

(* my_nat_ind
     : forall P : my_nat -> Prop,
       P my_0 ->
       (forall m : my_nat, P m -> P (my_S m)) -> forall m : my_nat, P m*)

Print nat.
Check 0.
Check (S 0).
Check 1.

Print plus.
Print Nat.add.

(*
Nat.add = 
fix add (n m : nat) {struct n} : nat :=
  match n with
  | 0 => m
  | S p => S (add p m)
  end
     : nat -> nat -> nat
add (S p) m : add p m
R(S p, m) > R(p, m)
R(x, y) = x
(S p) > p : ordre structurel *)

Lemma ax1: forall x : nat, 0 + x = x.
Proof.
  intro.
  simpl.
  reflexivity.
Qed.

Lemma ex2 : forall x : nat, x + 0 = x.
Proof.
  (*induction x.*)
  intro.
  elim x.
  simpl; reflexivity.
  intros.
  simpl.
  rewrite H.
  reflexivity.
 Qed.
 
Require Export List.
Open Scope list_scope.
Import ListNotations.

Print list.

(* Inductive list (A : Type) : Type :=
    nil : list A
  | cons : A -> list A -> list A*)

Check (0 :: 1 :: 2 :: nil).

Print app.

(* 
app = 
fun A : Type =>
fix app (l m : list A) {struct l} : list A :=
  match l with
  | [] => m
  | a :: l1 => a :: app l1 m
  end
     : forall A : Type, list A -> list A -> list A*)

Lemma ex3 : forall (E :Type) (l : list E), nil ++ l = l.
Proof.
  intros.
  simpl.
  reflexivity.
Qed.

Lemma ex4 : forall (E : Type) (l : list E), l ++ nil = l.
Proof.
  intros.
  elim l.
  simpl.
  reflexivity.
  intros.
  simpl.
  rewrite H.
  reflexivity.
Qed.

Print Nat.mul.

Lemma exo1 : forall n : nat, n * 1 = n.
Proof.
  intros.
  elim n.
  simpl.
  reflexivity.
  intros.
  simpl.
  rewrite H.
  reflexivity.
Qed.

Fixpoint f (n: nat) :=
  match n with
  | 0 => 1
  | (S p) => 2 * (f p)
  end.

Lemma exo2 : (f 10) = 1024.
Proof.
  simpl.
  reflexivity.
Qed.

Eval compute in (rev (1 :: 2 :: 3 :: nil)).

Lemma exo3 : forall (E : Type) (l : (list E)) (a : E),
  rev (l ++ [a]) = a :: rev l.
Proof.
  intros.
  elim l; intros.
  simpl.
  reflexivity.
  simpl.
  rewrite H.
  simpl.
  reflexivity.
Qed.

Lemma exo4 : forall (E : Type) (l : (list E)), rev (rev l) = l.
Proof.
  intros.
  elim l; intros.
  simpl.
  reflexivity.
  simpl.
  rewrite (exo3 E (rev l0) a).
  rewrite H.
  reflexivity.
Qed.

(***********************)
(* Relations indutives *)
(***********************)

(* is_even(n) : N -> Prop 
1- is_even(0)
2- si n in N et si even(n) alors is even(n+2) *)

Inductive is_even : nat -> Prop :=
| is_even_0 : is_even 0
| is_even_S : forall n : nat, is_even n -> is_even (S (S n)).

Print is_even.

Check Prop.


Check is_even_ind.
Check is_even_0.
Check is_even_S.

Lemma ex5 : is_even 2.
Proof.
  apply is_even_S.
  apply is_even_0.
Qed.

Lemma ex6 : is_even 4.
Proof.
  apply is_even_S.
  apply is_even_S.
  apply is_even_0.
Qed.

Lemma ex7 : ~(is_even 3).
Proof.
  intro.
  inversion H.
  inversion H1.
Qed.

Lemma ex8 : ~(is_even 5).
Proof.
  intro.
  inversion H.
  inversion H1.
  inversion H3.
Qed.

Ltac prove_is_even :=
  (repeat apply is_even_S); apply is_even_0.
  
Lemma ex9: is_even 12.
  prove_is_even.
Qed.

Ltac prove_not_is_even :=
  intro;
  repeat
  (match goal with
  | H : is_even _ |- _ => inversion H; clear H
  end).
  
Lemma ex10: ~(is_even 11).
  prove_not_is_even.
 Qed.

Ltac prove_all :=
  prove_is_even || prove_not_is_even.
  
Lemma ex11 : is_even 36.
Proof.
  prove_all.
Qed.

Lemma ex12 : ~(is_even 37).
Proof.
  prove_all.
Qed.

Fixpoint f_is_even (n : nat) : bool :=
  match n with
  | 0 => true
  | 1 => false
  | (S (S p)) => (f_is_even p)
  end.
  
Require Import FunInd.

Functional Scheme f_is_even_ind :=
  Induction for f_is_even Sort Prop.
  
  
  
Lemma correction : forall n, (f_is_even n) = true -> is_even n.
Proof.
  (*intro.
  elim n.
  intro.
  apply is_even_0.
  intro.
  elim n0.
  intros.
  simpl in H0.
  inversion H0.
  intros.
  simpl in H1.*)
  intro.
  functional induction (f_is_even n) using f_is_even_ind.
  intro.
  apply is_even_0.
  intro.
  inversion H.
  intro.
  apply is_even_S.
  apply IHb.
  assumption.
 Qed.
 
 Lemma completude : forall n,
    is_even n -> (f_is_even n) = true.
Proof.
  intros.
  elim H.
  simpl.
  reflexivity.
  intros.
  simpl.
  assumption.
Qed.
 
Inductive sorted (A:Set)(R:A->A->Prop) : list A -> Prop :=
| sorted0 : sorted A R nil
| sorted1 : forall x:A, sorted A R (cons x nil)
| sorted2 :
forall (x y:A)(l:list A),
R x y ->
sorted A R (cons y l)-> sorted A R (cons x (cons y l)).

Check sorted.
Print sorted.
Print sorted_sind.

  




=======================================================================================================








Lemma eq_nat : forall n m : nat, {n = m} + { n <> m}.
Proof.
  (* decide equality *)
  double induction n m ; intros.
  left.
  reflexivity.
  right.
  discriminate.
  right.
  discriminate.
  elim (H0 n0); intros.
  left.
  rewrite a.
  reflexivity.
  right.
  auto.
Qed.

Lemma eq_nat2 : forall n m : nat, {n = m} + { n <> m}.
Proof.
  (* decide equality *)
  induction n; induction m ; intros.
  left.
  reflexivity.
  right.
  discriminate.
  right.
  discriminate.
  elim (IHn m); intros.
  left.
  auto.
  right.
  auto.
Qed.






=====================================================================================================








Parameters A B : Prop.
Lemma exo10 : (A -> B) -> (B -> A) -> (A <-> B).
Proof.
intros.
split.
2: {
  assumption.
}
1: {
  assumption.
}
Qed.

Lemma exo10v2 : (A -> B) -> (B -> A) -> (A <-> B).
Proof.
intros.
split.
assumption.
assumption.
Qed.






=============================================================================================================






Parameters E : Set.

(* ne pas declarer la variable x utiliser dans la formule *)

(* ATTENTION, on écrit (P x) pas, P(x) ! *)

Parameters a : E.
Parameters P : E -> Prop.
Parameters Q : E -> Prop.

(* forall x:P(x) =>  exist y:P(y) \/ Q(y) *)

Lemma prop1 : forall x, P(x) -> (exists y : E, P(y) \/ Q(y)).
Proof.
intros.
exists x.
left.
assumption.
Qed.

Lemma prop2 : (exists x, P(x)\/ Q(x)) -> (exists x, P(x)) \/ (exists x, Q(x)).
Proof.
intro.
elim H; intros.
elim H0; intros.
intros.
left.
exists x.
assumption.
right.
exists x.
assumption.
Qed.


Lemma prop3 : (forall x, P(x)) /\ (forall x, Q(x)) -> forall x, P(x) /\ Q(x).
Proof.
intros.
elim H.
intros.
split.
apply (H0 x).
apply (H1 x).
Qed.

Lemma prop4 : (forall x, P(x) /\ Q(x)) -> (forall x, P(x)) /\ (forall x, Q(x)).
Proof.
intros.
split.
intro.
(* il ne faut pas utiliser apply mais plutot un : elim (H x) parce que ici les conclusions sont différentes et ce n'est pas le scope du apply *)
2: {
intro.
apply (H x).
}
apply (H x).
Qed.

Lemma prop5 : (forall x, ~P(x)) -> ~(exists x, P(x)).
Proof.
intro.
intro.
elim H0.
intros.
apply (H x).
assumption.
Qed.

Require Export Classical.
Check NNPP.

Lemma prop6 : ~(forall x, P(x)) -> exists x, ~P(x).
Proof.
intro.
apply NNPP.
intro.
apply H.
intro.
apply NNPP.
intro.
apply H0.
exists x.
assumption.
Qed.





















============================================================================================================================


				TP NOTE 30 Mars




(* $Id$ *)

(**** Sorting algorithm ****)

Require Import Arith.
Require Import Omega.
Require Export List.
Open Scope list_scope.
Import ListNotations.

(* Specification *)

Inductive is_perm : list nat -> list nat -> Prop :=
| is_perm_cons : forall (a : nat) (l0 l1 : list nat),
    is_perm l0 l1 -> is_perm (a :: l0) (a :: l1)
| is_perm_append : forall (a : nat) (l : list nat),
    is_perm (a :: l) (l ++ a :: nil)
| is_perm_refl : forall l : list nat, is_perm l l
| is_perm_trans : forall l0 l1 l2 : list nat,
    is_perm l0 l1 -> is_perm l1 l2 -> is_perm l0 l2
| is_perm_sym : forall l1 l2 : list nat, is_perm l1 l2 -> is_perm l2 l1.

Lemma is_perm_ex1_decomposer : is_perm [1; 2; 3] [3; 2; 1].
Proof.
  apply (is_perm_trans [1; 2; 3] ([2; 3] ++ [1]) [3; 2; 1]).
  apply is_perm_append.
  simpl.
  apply (is_perm_trans [2; 3; 1] ([3; 1] ++ [2]) [3; 2; 1]).
  apply is_perm_append.
  simpl.
  apply is_perm_cons.
  apply (is_perm_trans [1; 2] ([2] ++ [1]) [2; 1]).
  apply is_perm_append.
  simpl.
  apply is_perm_refl.
Qed.

Lemma is_perm_ex1_compact : is_perm [1; 2; 3] [3; 2; 1].
Proof.
  apply (is_perm_trans [1; 2; 3] ([2; 3] ++ [1]) [3; 2; 1]);
    [ apply is_perm_append | simpl ].
  apply (is_perm_trans [2; 3; 1] ([3; 1] ++ [2]) [3; 2; 1]);
    [ apply is_perm_append | simpl ].
  apply is_perm_cons.
  apply (is_perm_trans [1; 2] ([2] ++ [1]) [2; 1]);
    [ apply is_perm_append | simpl ].
  apply is_perm_refl.
Qed.

(* Ltac = Let tac |? Language tac *)

Ltac is_perm_tac :=
  repeat
    (apply is_perm_refl || apply is_perm_cons ||
     (match goal with
      | |- is_perm (?a1::?tl1) ?l =>
        apply (is_perm_trans (a1::tl1) (tl1 ++ a1::nil) l);
          [ apply is_perm_append | simpl ]
      end)).

Lemma is_perm_ex2 : is_perm [1; 2; 3] [3; 2; 1].
Proof.
  is_perm_tac.
Qed.

Inductive is_sorted : list nat -> Prop :=
| is_sorted_nil : is_sorted nil
| is_sorted_sing : forall n : nat, is_sorted (n::nil)
| is_sorted_cons : forall (n m : nat) (l : list nat),
    n <= m -> is_sorted (m::l) -> is_sorted (n::m::l).

Lemma is_sorted_ex1 : is_sorted [1; 2; 3; 4; 5].
Proof.
  apply is_sorted_cons.
  2: {
    apply is_sorted_cons.
    2: {
      apply is_sorted_cons.
      2: {
        apply is_sorted_cons.
        2: {
          apply is_sorted_sing.
        }
        auto.
      }
      auto.
    }
    auto.
  }
  auto.
Qed.

(* éclair de génie pendant mon écriture *)

Lemma is_sorted_ex1_v2 : is_sorted [1; 2; 3; 4; 5].
Proof.
  apply is_sorted_cons;  auto.
  apply is_sorted_cons;  auto.
  apply is_sorted_cons;  auto.
  apply is_sorted_cons;  auto.
  apply is_sorted_sing;  auto.
Qed.

(* J'ai envie d'utiliser l'écriture avec les [ ..|.. ] mais je ne comprends pas l'erreur ...*)


(* Automation *)

Ltac is_sorted_tac :=
  repeat
    (
    apply is_sorted_nil ||
     apply is_sorted_sing ||
     apply is_sorted_cons ||
     auto
    ).

Lemma is_sorted_ex2 : is_sorted [1; 2; 3; 4; 5].
Proof.
  is_sorted_tac.
Qed.

Lemma is_sorted_ex2_2 : is_sorted [0; 2; 4; 6; 8; 8; 10].
Proof.
  is_sorted_tac.
Qed.

Lemma is_sorted_ex3 : is_sorted [1].
Proof.
  is_sorted_tac.
Qed.

Lemma is_sorted_ex4 : is_sorted [].
Proof.
  is_sorted_tac.
Qed.

(* Sorting function: insertion sort *)

Fixpoint insert (x : nat) (l : list nat) {struct l} : list nat :=
  match l with
  | nil => x::nil
  | h::t =>
        (* le_dec = less equal decidable *)
        match le_dec x h with
        | left _ => x::h::t
        | right _ => h::(insert x t)
        end
  end.

Fixpoint isort (l : list nat) : list nat :=
  match l with
  | nil => nil
  | h::t => insert h (isort t)
  end.

Lemma isort_ex1 : isort [5; 4; 3; 2; 1] = [1; 2; 3; 4; 5].
Proof.
  simpl.
  reflexivity.
Qed.

(* Correctness proof *)

Lemma head_is_perm : forall (x1 x2 : nat) (l : list nat),
  is_perm (x1 :: x2 :: l) (x2 :: x1 :: l).
Proof.
  intros.
  apply is_perm_trans with (x2::l ++ x1::nil).
  apply is_perm_append.
  apply is_perm_cons.
  apply is_perm_sym.
  apply is_perm_append.
Qed.

Lemma insert_is_perm : forall (x : nat) (l : list nat),
  is_perm (x::l) (insert x l).
Proof.
  (* To do *)
Qed.

Lemma insert_is_sorted : forall (x : nat) (l : list nat),
  is_sorted l -> is_sorted (insert x l).
Proof.
  (* To do *)
Qed.

Lemma isort_correct : forall (l l' : list nat),
  l' = isort l -> is_perm l l' /\ is_sorted l'.
Proof.
  (* To do *)
Qed.
